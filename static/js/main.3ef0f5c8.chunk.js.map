{"version":3,"sources":["types.tsx","assets/musical-note.svg","components/MusicNote.tsx","components/Board.tsx","components/Chat.tsx","components/BottomPanel.tsx","assets/drum.svg","components/Panel.tsx","assets/drumbeat.mp3","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PanelItemEnum","MusicNote","top","left","alt","style","width","height","position","src","musicNote","Board","musicNotes","updateNotes","emojis","updateEmojis","chatMessages","updateChatMessages","className","TransitionGroup","map","emoji","CSSTransition","timeout","classNames","onEntered","index","findIndex","_emoji","key","slice","zIndex","userSelect","type","note","noteIndex","_note","message","msg","value","Chat","sendMessage","useState","chatValue","setChatValue","textfieldRef","useRef","TextField","autoFocus","ref","placeholder","variant","onChange","event","target","onKeyPress","marginRight","onFocus","window","innerWidth","current","offsetTop","document","body","scrollTop","Button","onClick","emojiList","BottomPanel","isOpen","onAction","Drawer","anchor","open","IconButton","renderPanelContent","iconStyle","marginTop","Panel","onClose","selectedItem","Tooltip","title","ChevronRight","Object","keys","item","isSelected","PanelItem","buttonContent","color","undefined","sound","drum","InsertEmoticon","Palette","gifs","Gif","chat","renderPanelItem","socketURL","location","hostname","socket","io","transports","generateRandomXY","centered","x","Math","random","y","innerHeight","App","isPanelOpen","setIsPanelOpen","setMusicNotes","setEmojis","setChatMessages","selectedPanelItem","setSelectedPanelItem","audio","Audio","drumBeat","playEmoji","useCallback","concat","uuidv4","playSound","randomX","randomY","notes","currentTime","play","addChatMessage","newMessage","useEffect","onConnect","onMessageEvent","on","off","minHeight","ChevronLeft","emit","Boolean","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3ef0f5c8.chunk.js","sourcesContent":["export interface IMessageEvent {\n  key: \"sound\" | \"emoji\" | \"chat\";\n  value?: string;\n}\n\nexport interface IEmoji {\n  top: number;\n  left: number;\n  key: string;\n  type: string;\n}\n\nexport interface IChatMessage {\n  top: number;\n  left: number;\n  key: string;\n  value: string;\n}\n\nexport enum PanelItemEnum {\n  \"sound\" = \"sound\",\n  \"emoji\" = \"emoji\",\n  \"color\" = \"color\",\n  \"gifs\" = \"gifs\",\n  \"chat\" = \"chat\",\n}\n","export default __webpack_public_path__ + \"static/media/musical-note.49e6a279.svg\";","import React from \"react\";\nimport musicNote from \"../assets/musical-note.svg\";\n\nexport interface IMusicNoteProps {\n  top: number;\n  left: number;\n  key: string;\n}\n\nexport const MusicNote = ({ top, left }: IMusicNoteProps) => {\n  return (\n    <img\n      alt=\"musical note\"\n      style={{ width: 40, height: 40, top, left, position: \"absolute\" }}\n      src={musicNote}\n    />\n  );\n};\n","import \"./Board.css\";\n\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { IChatMessage, IEmoji } from \"../types\";\nimport { IMusicNoteProps, MusicNote } from \"./MusicNote\";\n\nimport React from \"react\";\n\ninterface IBoardProps {\n  musicNotes: IMusicNoteProps[];\n  updateNotes: (notes: IMusicNoteProps[]) => void;\n  emojis: IEmoji[];\n  updateEmojis: (emojis: IEmoji[]) => void;\n  chatMessages: IChatMessage[];\n  updateChatMessages: (chatMessages: IChatMessage[]) => void;\n}\n\nexport const Board = ({\n  musicNotes,\n  updateNotes,\n  emojis,\n  updateEmojis,\n  chatMessages,\n  updateChatMessages,\n}: IBoardProps) => {\n  return (\n    <div className=\"board-container\">\n      <TransitionGroup>\n        {emojis.map((emoji) => (\n          <CSSTransition\n            key={emoji.key}\n            timeout={1000}\n            classNames=\"note-transition\"\n            onEntered={() => {\n              const index = emojis.findIndex(\n                (_emoji) => _emoji.key === emoji.key\n              );\n              updateEmojis([\n                ...emojis.slice(0, index),\n                ...emojis.slice(index + 1),\n              ]);\n            }}\n          >\n            <div\n              style={{\n                width: 40,\n                height: 40,\n                top: emoji.top,\n                left: emoji.left,\n                position: \"absolute\",\n                zIndex: 9999999,\n                userSelect: \"none\",\n              }}\n            >\n              {emoji.type}\n            </div>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n\n      <TransitionGroup>\n        {musicNotes.map((note) => (\n          <CSSTransition\n            key={note.key}\n            timeout={1000}\n            classNames=\"note-transition\"\n            onEntered={() => {\n              const noteIndex = musicNotes.findIndex(\n                (_note) => _note.key === note.key\n              );\n              updateNotes([\n                ...musicNotes.slice(0, noteIndex),\n                ...musicNotes.slice(noteIndex + 1),\n              ]);\n            }}\n          >\n            <MusicNote {...note} />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n\n      <TransitionGroup>\n        {chatMessages.map((message) => (\n          <CSSTransition\n            key={message.key}\n            timeout={7000}\n            classNames=\"message-transition\"\n            onEntered={() => {\n              const index = chatMessages.findIndex(\n                (msg) => msg.key === message.key\n              );\n              updateChatMessages([\n                ...chatMessages.slice(0, index),\n                ...chatMessages.slice(index + 1),\n              ]);\n            }}\n          >\n            <div\n              className=\"board-message\"\n              style={{\n                top: message.top,\n                left: message.left,\n              }}\n            >\n              {message.value}\n            </div>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n};\n","import { Button, TextField } from \"@material-ui/core\";\nimport React, { useRef, useState } from \"react\";\n\ninterface IChatProps {\n  sendMessage: (message: string) => void;\n}\n\nexport const Chat = ({ sendMessage }: IChatProps) => {\n  const [chatValue, setChatValue] = useState(\"\");\n  const textfieldRef = useRef<HTMLDivElement>(null);\n\n  const onChangeChat = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChatValue(event.target.value);\n  };\n\n  const onKeyPressChat = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      sendMessage(chatValue);\n      setChatValue(\"\");\n    }\n  };\n\n  const onButtonClickChat = () => {\n    sendMessage(chatValue);\n    setChatValue(\"\");\n  };\n\n  const onFocus = () => {\n    if (window.innerWidth < 500 && textfieldRef.current) {\n      const offsetTop = textfieldRef.current.offsetTop;\n      document.body.scrollTop = offsetTop;\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <TextField\n        autoFocus\n        ref={textfieldRef}\n        placeholder=\"type a message\"\n        variant=\"outlined\"\n        value={chatValue}\n        onChange={onChangeChat}\n        onKeyPress={onKeyPressChat}\n        style={{ marginRight: 5 }}\n        onFocus={onFocus}\n      />\n      <Button onClick={onButtonClickChat}>send</Button>\n    </div>\n  );\n};\n","import { Drawer, IconButton } from \"@material-ui/core\";\n\nimport { Chat } from \"./Chat\";\nimport { PanelItemEnum } from \"../types\";\nimport React from \"react\";\n\ninterface IPanelProps {\n  isOpen: boolean;\n  type?: PanelItemEnum;\n  onAction: (key: string, ...args: any[]) => void;\n}\n\nconst emojiList: string[] = [\"😍\", \"😎\", \"👏\", \"👀\", \"✨\", \"🦃\"];\n\nexport const BottomPanel = ({ isOpen, type, onAction }: IPanelProps) => {\n  const renderPanelContent = () => {\n    switch (type) {\n      case \"emoji\":\n        return (\n          <>\n            {emojiList.map((emoji) => (\n              <div key={emoji} className=\"bottom-panel-emoji\">\n                <IconButton onClick={() => onAction(\"emoji\", emoji)}>\n                  {emoji}\n                </IconButton>\n              </div>\n            ))}\n          </>\n        );\n\n      case \"chat\":\n        return (\n          <Chat\n            sendMessage={(message) => {\n              onAction(\"chat\", message);\n            }}\n          />\n        );\n    }\n  };\n\n  return (\n    <Drawer variant=\"persistent\" anchor=\"bottom\" open={isOpen}>\n      <div className=\"bottom-panel-container\">{renderPanelContent()}</div>\n    </Drawer>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/drum.5ae1d20c.svg\";","import \"./Panel.css\";\n\nimport {\n  Chat,\n  ChevronRight,\n  Gif,\n  InsertEmoticon,\n  Palette,\n} from \"@material-ui/icons/\";\nimport { Drawer, IconButton, Tooltip } from \"@material-ui/core\";\n\nimport { PanelItemEnum } from \"../types\";\nimport React from \"react\";\nimport drum from \"../assets/drum.svg\";\n\nconst iconStyle: React.CSSProperties = {\n  width: 50,\n  height: 50,\n  marginTop: 10,\n};\n\ninterface IPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onClick: (key: string) => void;\n  selectedItem?: PanelItemEnum;\n}\n\nexport const Panel = ({\n  isOpen,\n  onClose,\n  onClick,\n  selectedItem,\n}: IPanelProps) => {\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen}>\n      <div className=\"panel-container\">\n        <Tooltip title=\"close panel\">\n          <IconButton style={{ marginTop: 20 }} onClick={onClose}>\n            <ChevronRight />\n          </IconButton>\n        </Tooltip>\n        {Object.keys(PanelItemEnum).map((item) => (\n          <PanelItem\n            {...item}\n            key={item}\n            title={item}\n            onClick={() => onClick(item)}\n            isSelected={selectedItem === item}\n          />\n        ))}\n      </div>\n    </Drawer>\n  );\n};\n\ninterface IPanelItemProps {\n  onClick: () => void;\n  title: string;\n  isSelected: boolean;\n}\n\nconst PanelItem = ({ title, onClick, isSelected }: IPanelItemProps) => {\n  const renderPanelItem = () => {\n    let buttonContent;\n    const style: React.CSSProperties = {\n      ...iconStyle,\n      color: isSelected ? \"orange\" : undefined,\n    };\n\n    switch (title) {\n      case PanelItemEnum.sound:\n        buttonContent = <img style={iconStyle} src={drum} alt={title} />;\n        break;\n      case PanelItemEnum.emoji:\n        buttonContent = <InsertEmoticon style={style} />;\n        break;\n      case PanelItemEnum.color:\n        buttonContent = <Palette style={style} />;\n        break;\n      case PanelItemEnum.gifs:\n        buttonContent = <Gif style={style} />;\n        break;\n      case PanelItemEnum.chat:\n        buttonContent = <Chat style={style} />;\n        break;\n    }\n\n    return <IconButton onClick={onClick}>{buttonContent}</IconButton>;\n  };\n\n  return (\n    <Tooltip title={title}>\n      <div>{renderPanelItem()}</div>\n    </Tooltip>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/drumbeat.e0f520f5.mp3\";","import \"./App.css\";\n\nimport { IChatMessage, IEmoji, IMessageEvent, PanelItemEnum } from \"./types\";\nimport { IconButton, Tooltip } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { Board } from \"./components/Board\";\nimport { BottomPanel } from \"./components/BottomPanel\";\nimport { ChevronLeft } from \"@material-ui/icons\";\nimport { IMusicNoteProps } from \"./components/MusicNote\";\nimport { Panel } from \"./components/Panel\";\n//@ts-ignore\nimport drumBeat from \"./assets/drumbeat.mp3\";\nimport io from \"socket.io-client\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst isDebug = false;\n\nconst socketURL =\n  window.location.hostname === \"localhost\"\n    ? \"ws://localhost:8000\"\n    : \"wss://adventure-chat.herokuapp.com\";\n\nisDebug && console.log(\"socket url = \", socketURL);\n\nconst socket = io(socketURL, { transports: [\"websocket\"] });\n\nconst generateRandomXY = (centered?: boolean) => {\n  if (centered) {\n    // 1/4 to 3/4\n\n    const randomX =\n      (Math.random() * window.innerWidth * 2) / 4 + window.innerWidth / 4;\n    const randomY =\n      (Math.random() * window.innerHeight * 2) / 4 + window.innerHeight / 4;\n\n    //1/3 to 2/3\n\n    // const randomX =\n    //   (Math.random() * window.innerWidth) / 3 + window.innerWidth / 3;\n    // const randomY =\n    //   (Math.random() * window.innerHeight) / 3 + window.innerHeight / 3;\n\n    return { x: randomX, y: randomY };\n  } else {\n    const randomX = Math.random() * window.innerWidth;\n    const randomY = Math.random() * window.innerHeight;\n    return { x: randomX, y: randomY };\n  }\n};\n\nfunction App() {\n  const [isPanelOpen, setIsPanelOpen] = useState(true);\n  const [musicNotes, setMusicNotes] = useState<IMusicNoteProps[]>([]);\n  const [emojis, setEmojis] = useState<IEmoji[]>([]);\n  const [chatMessages, setChatMessages] = useState<IChatMessage[]>([]);\n  const [selectedPanelItem, setSelectedPanelItem] = useState<PanelItemEnum>();\n\n  const audio = useRef<HTMLAudioElement>(new Audio(drumBeat));\n\n  const playEmoji = useCallback((type: string) => {\n    const { x, y } = generateRandomXY();\n\n    setEmojis((emojis) =>\n      emojis.concat({ top: y, left: x, key: uuidv4(), type })\n    );\n  }, []);\n\n  const playSound = useCallback(() => {\n    if (!audio || !audio.current) return;\n\n    const randomX = Math.random() * window.innerWidth;\n    const randomY = Math.random() * window.innerHeight;\n\n    setMusicNotes((notes) =>\n      notes.concat({ top: randomY, left: randomX, key: uuidv4() })\n    );\n\n    audio.current.currentTime = 0;\n    audio.current.play();\n  }, [audio]);\n\n  const onClickPanelItem = (key: string) => {\n    switch (key) {\n      case \"sound\":\n        playSound();\n\n        socket.emit(\"event\", {\n          key: \"sound\",\n        });\n        break;\n\n      case \"emoji\":\n      case \"chat\":\n        setSelectedPanelItem(\n          selectedPanelItem === key ? undefined : (key as PanelItemEnum)\n        );\n\n        break;\n    }\n  };\n\n  const addChatMessage = useCallback((message: string) => {\n    const { x, y } = generateRandomXY(true);\n    const newMessage: IChatMessage = {\n      top: y,\n      left: x,\n      key: uuidv4(),\n      value: message,\n    };\n    setChatMessages((chatMessages) => chatMessages.concat(newMessage));\n  }, []);\n\n  useEffect(() => {\n    function onConnect() {\n      isDebug && console.log(\"connected to socket\");\n    }\n\n    const onMessageEvent = (message: IMessageEvent) => {\n      switch (message.key) {\n        case \"sound\":\n          playSound();\n          break;\n        case \"emoji\":\n          if (message.value) {\n            playEmoji(message.value);\n          }\n          break;\n        case \"chat\":\n          if (message.value) {\n            addChatMessage(message.value);\n          }\n          break;\n      }\n    };\n\n    socket.on(\"connect\", onConnect);\n\n    socket.on(\"event\", onMessageEvent);\n\n    return () => {\n      socket.off(\"connect\", onConnect);\n      socket.off(\"event\", onMessageEvent);\n    };\n  }, [playEmoji, playSound, addChatMessage]);\n\n  const actionHandler = (key: string, ...args: any[]) => {\n    switch (key) {\n      case \"chat\":\n        const chatValue = args[0] as string;\n        socket.emit(\"event\", {\n          key: \"chat\",\n          value: chatValue,\n        });\n        break;\n      case \"emoji\":\n        const emoji = args[0] as string;\n        playEmoji(emoji);\n        socket.emit(\"event\", {\n          key: \"emoji\",\n          value: emoji,\n        });\n    }\n  };\n\n  return (\n    <div className=\"app\" style={{ minHeight: window.innerHeight - 10 }}>\n      <Board\n        musicNotes={musicNotes}\n        updateNotes={setMusicNotes}\n        emojis={emojis}\n        updateEmojis={setEmojis}\n        chatMessages={chatMessages}\n        updateChatMessages={setChatMessages}\n      />\n\n      <div className=\"open-panel-button\">\n        {!isPanelOpen && (\n          <Tooltip title=\"open panel\">\n            <IconButton\n              onClick={() => {\n                setIsPanelOpen(true);\n              }}\n            >\n              <ChevronLeft />\n            </IconButton>\n          </Tooltip>\n        )}\n      </div>\n      <Panel\n        onClick={onClickPanelItem}\n        isOpen={isPanelOpen}\n        onClose={() => {\n          setIsPanelOpen(false);\n        }}\n        selectedItem={selectedPanelItem}\n      />\n\n      <BottomPanel\n        type={selectedPanelItem}\n        isOpen={Boolean(selectedPanelItem)}\n        onAction={actionHandler}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}